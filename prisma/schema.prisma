generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String        @id @default(uuid()) @db.Uuid
  clerkId      String        @unique
  firstName    String
  lastName     String
  userName     String        @unique
  email        String?       @unique
  profileImage String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  badgeRank    Int?
  bio          String?
  coverImage   String?
  interests    String?
  meetingSpots String?
  role         UserRole      @default(USER)
  posts        Post[]
  verification Verification?

  @@index([userName, email])
}

model Verification {
  userId      String             @unique @db.Uuid
  documentUrl String
  status      VerificationStatus @default(PENDING)
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  id          String             @id @default(uuid()) @db.Uuid
  user        Profile            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  description String
  image       String?
  province    String
  lat         Float?
  lng         Float?
  price       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  profileId   String     @db.Uuid
  categoryId  String?
  condition   Condition
  status      PostStatus @default(AVAILABLE)
  views       Int        @default(0)
  tags        String?
  profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model Follow {
  id          String   @id @default(uuid()) @db.Uuid
  followerId  String   @db.Uuid
  followingId String   @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model Block {
  id        String   @id @default(uuid()) @db.Uuid
  blockerId String   @db.Uuid
  blockedId String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([blockerId, blockedId])
}

model Comment {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  postId    String   @db.Uuid
  profileId String   @db.Uuid
}

model Favorite {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  profileId String   @db.Uuid
  postId    String   @db.Uuid
}

model Chat {
  id         String   @id @default(uuid()) @db.Uuid
  creatorId  String   @db.Uuid
  receiverId String   @db.Uuid
  isGroup    Boolean  @default(false)
  createdAt  DateTime @default(now())
}

model Message {
  id        String   @id @default(uuid()) @db.Uuid
  chatId    String   @db.Uuid
  senderId  String   @db.Uuid
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Trade {
  id            String      @id @default(uuid()) @db.Uuid
  status        TradeStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now())
  offerById     String      @db.Uuid
  offerToId     String      @db.Uuid
  postOfferedId String      @db.Uuid
  postWantedId  String?     @db.Uuid
}

model Review {
  id         String   @id @default(uuid()) @db.Uuid
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  reviewerId String   @db.Uuid
  revieweeId String   @db.Uuid
}

model Category {
  id   String @id @default(uuid()) @db.Uuid
  name String @unique
}

model Notification {
  id         String   @id @default(uuid()) @db.Uuid
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  receiverId String   @db.Uuid
}

enum PostStatus {
  AVAILABLE
  PENDING_TRADE
  TRADED
  CLOSED
}

enum TradeStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

enum Condition {
  NEW
  USED
  LIKE_NEW
  REFURBISHED
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}
