"use server";

import db from "@/utils/db";
import { currentUser } from "@clerk/nextjs/server";

/**
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á posts, followers, following, ‡πÅ‡∏•‡∏∞ verification
 */
export async function getProfileById(id: string) {
  // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° verification: true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô
  return await db.profile.findUnique({
    where: { id },
    include: {
      verification: true, // ‚Üê ‡∏î‡∏∂‡∏á verification ‡∏î‡πâ‡∏ß‡∏¢
      posts: {
        include: {
          favorites: true,
          comments: true,
        },
      },
      followers: true,
      following: true,
    },
  });
}

/**
 * ‡∏Å‡∏î Follow ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
 */
export async function followUser(currentUserProfileId: string, targetProfileId: string) {
  const existing = await db.follow.findUnique({
    where: {
      followerId_followingId: {
        followerId: currentUserProfileId,
        followingId: targetProfileId,
      },
    },
  });

  if (!existing) {
    await db.follow.create({
      data: {
        followerId: currentUserProfileId,
        followingId: targetProfileId,
      },
    });
  }

  return true;
}

/**
 * ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å Follow (Unfollow)
 */
export async function unfollowUser(currentUserProfileId: string, targetProfileId: string) {
  await db.follow.delete({
    where: {
      followerId_followingId: {
        followerId: currentUserProfileId,
        followingId: targetProfileId,
      },
    },
  });

  return true;
}


/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ä‡∏ó‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
 * ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏™‡πà‡∏á URL ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡∏ô‡∏±‡πâ‡∏ô‡∏Å‡∏•‡∏±‡∏ö
 */
export const startChat = async (receiverId: string) => {
  "use server";

  const user = await currentUser();
  if (!user) {
    console.error("‚ùå User not logged in");
    return null;
  }

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const senderProfile = await db.profile.findUnique({ where: { clerkId: user.id } });
  if (!senderProfile) {
    console.error("‚ùå Sender profile not found");
    return null;
  }

  // ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ä‡∏ó‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
  if (senderProfile.id === receiverId) {
    console.error("‚ùå Cannot chat with yourself");
    return null;
  }

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let chat = await db.chat.findFirst({
      where: {
        OR: [
          { creatorId: senderProfile.id, receiverId },
          { creatorId: receiverId, receiverId: senderProfile.id },
        ],
      },
    });

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ä‡∏ó‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    if (!chat) {
      console.log("üõ† Creating new chat...");
      chat = await db.chat.create({
        data: {
          creatorId: senderProfile.id,
          receiverId,
          isGroup: false,
          createdAt: new Date(),
        },
      });
    }

    // ‡∏™‡πà‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ä‡∏ó (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ dynamic route /chats)
    return `/chats`;
  } catch (error) {
    console.error("‚ùå Error starting chat:", error);
    return null;
  }
};
